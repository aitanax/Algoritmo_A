Tenemos dos tipos de usuarios:
	- Con enfermedades infectocontagiosas
	- Sin ella
El servicio se realizará en un transporte eléctrico colectivo
	- N: domicilio de paciente sin enfermedades infectocontagiosas.
	- C: domicilio de paciente con enfermedades infectocontagiosas.
	- CC: centro de atención a pacientes con enfermedades infectocontagiosas.
	- CN: centro de atención a pacientes sin enfermedades infectocontagiosas.
	- P: situación del parking
	- {1,2,3}: tiempo (coste energético) para transitar por esa ubicación. El 	tiempo/coste necesario para transitar por celdas sin valor (N, C, CC, CN o P) será de 	una unidad.
	- X: una posicion no transitable
Esta tarea se realizará con un vehiculo colectivo que, por compromiso medioambiental, es electrico. Con características:
	- Saldrá del parking y terminará en él. No deberá superar la capacidad del vehiculo.
	- Dispone de 10 plazas, con 2 para pacientes contagiosos. Siempre podrán ser usados 	por pacientes no contagiosos cuando no se transalden contagiosos.
	- 50 unidades de carga, recarga en parking, y es inmediata sin coste adicional.
	- Los contagiosos son lo ultimos en ser recogidos y lo primeros en ser dejados en sus 	respectivos centros de atención.
	- Siempre que el vehiculo transite por el domicilio de un paciente, y las condiciones 	permitan recogerlo, el paciente subira al vehículo.
	- El vehiculo solo se puede transladar sobre el mapa a celdas adyacentes horizontal o 	verticalmente.

1. Estado del problema:

	estado = { 'posicion': (x, y),
    'pasajeros': [(paciente, destino)],
    'energia': cantidad_energia
}

2. Operadores:

	def mover(estado, nueva_posicion):
    	# Operador para mover el vehículo a una nueva posición
    	nuevo_estado = estado.copy()
    	nuevo_estado['posicion'] = nueva_posicion
    	nuevo_estado['energia'] += obtener_costo(nueva_posicion)
    	return nuevo_estado

	def recoger_paciente(estado, paciente, destino):
    	# Operador para recoger a un paciente
    	nuevo_estado = estado.copy()
    	nuevo_estado['pasajeros'].append((paciente, destino))
    	nuevo_estado['energia'] += obtener_costo(estado['posicion'])
    	return nuevo_estado

	def dejar_paciente(estado, paciente):
    	# Operador para dejar a un paciente en su destino
    	nuevo_estado = estado.copy()
    	nuevo_estado['pasajeros'] = [(p, d) for p, d in estado['pasajeros'] if p != paciente]
    	nuevo_estado['energia'] += obtener_costo(estado['posicion'])
    	return nuevo_estado

3. Espacio de estados:

	El espacio de estados se compone de todas las posibles combinaciones de posición del vehículo, 	pasajeros recogidos y energía actual.

4. Función de costo:
	
	def calcular_costo(estado_actual, estado_sucesor):
    		return estado_sucesor['energia'] - estado_actual['energia']

5. Estado objetivo:
	
	def es_estado_objetivo(estado):
    		return len(estado['pasajeros']) == 0

	
6. Heurísticas
7. Restricciones
8. Función sucesor
9. Función de evaluación